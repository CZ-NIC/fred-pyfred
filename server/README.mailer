README file for mailer daemon
--------------------------------

Content:
    1. Introduction
    2. Configuration
    3. Templating
    4. Signing
    5. Further reading


1. Introduction

Mailer daemon is responsible for delivering and archiving email messages.
It is a CORBA server with interface consisting of two parts:

    1. User interface is one function for viewing and sending of emails.
    2. Admin interface is a set of functions for mailarchive searching.

Part of configuration is stored in database and part in a configuration file.
Mailer specific configuration can be found under section "Mailer". Sending
of email consists of following steps:

    1) Merging client provided mail headers and defaults stored in database.

    2) Running dataset provided by client and default dataset stored in
       database through templates and subject stored in database and
       selected according to email type, which is given by client.
       Mail type may contain multiple templates, each template will produce
       one part of multipart email message of MIME type text/*.

    3) Attachments not intended to be templated are retrieved from file-manager
       daemon, base64-encoded and attached to existing email message.

    4) The generated email (excluding non-templated attachments) is archived
       in database in text form together with some meta information (creation
       date, associated handles, ...).

    5) At the end the whole MIME multipart email message is transformed to
       text and sent by sendmail program. The sendmail return status is
       recorded in mail archive.

Searching of mail archive for an email is based on "filter" and method of
incremental transfers. Filter is a structure which specifies constraints,
which must be fulfilled by email message in order to be chosen for retrieval.
The set of results is then transfered in chunks, of which size can be specified
by client. When all data are transfered or they are not wanted anymore, the
transfer should be closed. Server has mechanism for auto-cleaning of transfers,
which seem to be unused.

There exist a utility which makes working with templates easier. It is
the script template_sucket in directory utils, which is capable of
printing of templates stored in database in well arranged manner and
printing of variables used in individual templates.


2. Configuration

In Mailer section are expected following configuration directives. None of
these is mandatory, default values are shown here.

    testmode = off
    tester   = email@address.tld
    sendmail = /usr/sbin/sendmail
    filemanager_object = FileManager
    idletreshold = 3600
    checkperiod = 10
    certfile=/ssl/server.crt
    keyfile=/ssl/server.key

If 'testmode' is enabled, the emails are not really sent to appropriate
recipients, but to address(es) specified by 'tester' directive. This is useful
when debugging the mailer. 'testmode' is by default off. 'sendmail' is a path
to binary compatible with original sendmail program (just functionality for
sending of emails is required). Filemanager is object responsible for managing
binary attachments. idletreshold and checkperiod influence auto-cleaning
algorithm of search objects.

Last two directives: certfile and keyfile, are connected with email signing.
Every email which is sent is signed. For signing is used server's certificate
given by certfile path and server's private key given by keyfile path.


3. Templating

As template system is used clearsilver, which is shared library, which can
be used from C and Python. Clearsilver templates are considerably easier
to use than xslt and at the same time have equal expression capabilities.
Information how to write clearsilver templates can be found at:
http://www.clearsilver.net/docs/man_templates.hdf. We will give just a few
examples, which should be sufficient for 99% of email templates, since
email templates aren't expected to be much complicated.

All substitution commands are enclosed in '<?cs' and '?>'.

  <?cs var:foo ?>    This will output variable 'foo' if it is defined.

  <?cs if:bar ?><?cs var:bar ?><?cs else ?>There is nothing to see<?cs /if ?>
  This is example of condition. If variable 'bar' is True then content of
  it is displayed. Otherwise the text after else is displayed.

The values for variables (in our case 'foo' and 'bar') are provided by
parameter of function for sending email, which is a list of key-value
structures.

Iterations can be done in following way (assuming we have defined myset,
which contains elements, which in turn have attributes key and value):

  <?cs each:item = myset ?>
    Key of element of myset: <?cs var:item.key ?>
    Value of element of myset: <?cs var:item.value ?>
  <?cs /each ?>


4. Signing

The signing is done by m2crypto python library which is just a wrapper around
openssl library. The email is signed as whole - it means including all MIME
subparts and headers. It is not possible to sign individual attachments by now.
If you change certificate or key, you need to restart the server in order for
changes to take effect.


5. Further reading

Details of corba interface are specified in IDL file Mailer.idl. Look there
for email headers which may be overwritten, exceptions which can be raised
and useful parameters to functions.

Information about templating system may be found at official page of
clearsilver library (http://www.clearsilver.net/docs/). The templates
are part of database creation scripts and are grouped together in file
mail_templates.sql.
