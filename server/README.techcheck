README file for techcheck daemon
--------------------------------

Content:
    1. Introduction
    2. Configuration


1. Introduction

Techcheck daemon is responsible for testing of nameservers in nsset. There
are two possible ways how to call out technical check(s).

  1) You can do technical check on a single nsset synchronously. It means
  that the caller is blocked until the tests are done and then receives
  results in form of return value from CORBA function.

  2) Another way is to do the test of nsset asynchronously. It means
  that server returns from CORBA function as soon as it has found all
  relevant data needed for technical check in database. The registrator
  is informed about results of technical tests in form of poll message
  over EPP interface.

The interface to techcheck daemon is specified by IDL file _TechCheck.idl
in directory with idls.

The technical check consists of several tests. The tests are highly dynamic and
are not hardcoded in source code. The possible tests are defined in database
and when the pyfred starts up, they are read and so called "test suite" is
constructed, which is used in all checks untill the pyfred is restarted. Test
suite is a sequence of technical tests which should be applyed if they are not
disabled by certain flag in database. There are a few attributes of test, the
most important is:

  * name of test
  * level of test (this is seriosity of test 1..10)
  * information about dependency on another test(s)
  * a path to script which executes the testing
  * flag saying if the test is meaningfull without domain fqdn(s)

Basic schema of technical check is as follows:

  1) test is popped from test suite and if the dependencies are satisfied
  and its level is lower or equal to specified level, the test is executed.
  By specified level is ment attribute of nsset object or the nsset level
  may be overriden by parameter of CORBA function. There is one more
  exception when the test is not executed. It is when the test requires
  a list (possibly containing only one item) of domain fqdns in order to
  be meaningfull, but there are not any fqdns.

  2) test is realized by execution of appropriate shell script.

  3) from return value of the script is deduced status of the test. Three
  values are possible: passed, failed, unknown. Unknown denotes that
  the script failed because of unexpected (unknown) reason or the reason
  is known, but it is not in scope of that particular test.

  4) poll message is generated for registrar if the check was submitted
  over EPP interface (asynchronous way) or the caller is informed
  about the results through return value of CORBA function (synchronous
  way).

  5) individual results of tests are archived in database if told to do so.

There are two basic categories of tests. Tests which require list of domain
fqdns and tests which test nameservers as such without need of specific
domain fqdns.

There is also interface accomodating search in executed technical checks
(if they were stored in database). The interface is pretty similar to
search interfaces in other modules ("filter and search object" model).

In background is continuosly performed technical check of all registered
nssets. This is called regular technical checks. Period during which
should be a registered nsset onetime checked is tunable through
configuration file as well as the "intensity" of regular technical checks.
By intensity we mean interval between two consequtive checks of two nssets.

For more detailed information about functioning of technical checks see
source file techcheck.py. For available tests see SQL script under db
directory in repository.


2. Configuration

In TechCheck section are expected following configuration directives.

    testmode = off
    scriptdir = ./techchecks
    msgLifetime = 7
    idletreshold=60
    checkperiod=60
    queueperiod=5
    oldperiod=30

If 'testmode' is enabled, the desired level is set to zero no matter which
level is associated with nsset in database of which level was selected by
caller of function. This is usefull when running test instance of pyfred.
'testmode' is by default off. 'scriptdir' is a directory where test scripts
reside. The names of scripts are configured in database. 'msgLifetime' is
expiration interval for poll messages stored in database by techcheck daemon
with results of technical checks.

Conventionaly idleteshold and checkperiod prune deleted or unused search
objects. queueperiod is period in seconds of performing regular technical
checks or queued asynchronous technical checks of registered nssets. Only
one nsset is checked in one period. So be carefull to set this value correctly.
Too long period might cause that not all registered nssets will be checked
in time and too short period might consume too much resources on your computer.
oldperiod is time in days, counted from last technical check of nsset, the
nsset must be checked again. Similary as in previous case, too short
queueperiod might result in non-manageable workload, when it is not possible
to check all nssets in time.

